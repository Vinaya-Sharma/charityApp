// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class activeCharity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save activeCharity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type activeCharity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("activeCharity", id.toString(), this);
    }
  }

  static load(id: string): activeCharity | null {
    return changetype<activeCharity | null>(store.get("activeCharity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get idNum(): BigInt {
    let value = this.get("idNum");
    return value!.toBigInt();
  }

  set idNum(value: BigInt) {
    this.set("idNum", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get fundedAmount(): BigInt {
    let value = this.get("fundedAmount");
    return value!.toBigInt();
  }

  set fundedAmount(value: BigInt) {
    this.set("fundedAmount", Value.fromBigInt(value));
  }

  get goal(): BigInt {
    let value = this.get("goal");
    return value!.toBigInt();
  }

  set goal(value: BigInt) {
    this.set("goal", Value.fromBigInt(value));
  }

  get funders(): Array<Bytes> | null {
    let value = this.get("funders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set funders(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("funders");
    } else {
      this.set("funders", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get completed(): boolean {
    let value = this.get("completed");
    return value!.toBoolean();
  }

  set completed(value: boolean) {
    this.set("completed", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get mainImage(): string {
    let value = this.get("mainImage");
    return value!.toString();
  }

  set mainImage(value: string) {
    this.set("mainImage", Value.fromString(value));
  }
}
